using AnimalAdoption.Models;
using Microsoft.EntityFrameworkCore;

namespace AnimalAdoption.Data
{
    public class AnimalAdoptionContext : DbContext
    {
        public AnimalAdoptionContext(DbContextOptions<AnimalAdoptionContext> options)
            : base(options)
        {
        }

        public DbSet<Animal> Animals { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<Adoption> Adoptions { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            // Set Id as the primary key
            modelBuilder.Entity<Adoption>()
                .HasKey(a => a.Id);

            // Make Id auto-generated by the database (identity)
            modelBuilder.Entity<Adoption>()
                .Property(a => a.Id)
                .ValueGeneratedOnAdd();

            // Configure foreign key relationships (UserId, AnimalId)
            modelBuilder.Entity<Adoption>()
                .HasOne(a => a.User)
                .WithMany(u => u.Adoptions)
                .HasForeignKey(a => a.UserId)
                .OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<Adoption>()
                .HasOne(a => a.Animal)
                .WithMany(an => an.Adoptions)
                .HasForeignKey(a => a.AnimalId)
                .OnDelete(DeleteBehavior.Cascade);

            // Optional: prevent duplicate adoptions for same user and animal
            modelBuilder.Entity<Adoption>()
                .HasIndex(a => new { a.UserId, a.AnimalId })
                .IsUnique();

            // Indexes for Animal entity
            modelBuilder.Entity<Animal>()
                .HasIndex(a => a.Species);
            modelBuilder.Entity<Animal>()
                .HasIndex(a => a.ArrivalDate);

            // Indexes for Adoption entity
            modelBuilder.Entity<Adoption>()
                .HasIndex(ad => ad.AnimalId);
            modelBuilder.Entity<Adoption>()
                .HasIndex(ad => ad.AdoptionDate);
            modelBuilder.Entity<Adoption>()
                .HasIndex(ad => ad.UserId);
        }

    }
}
